#!/usr/bin/env python
__description__ = \
"""
Takes set of output files from calc_hbond.tcl and generates an R-readable file
describing hydrogen bonds over all trajectories.
"""
__author__ = "Michael J. Harms"
__date__ = "080506"
__usage__ = "calcHbondProcessor.py vmd_output_dir"

import sys, os

def mergeAtoms(atom_list):
    """
    """

    merge_dict = {"NH1":"NH*","NH2":"NH*",
                  "OD1":"OD*","OD2":"OD*",
                  "OE1":"OE*","OE2":"OE*"}

    merge_keys = merge_dict.keys()
    out_list = []
    for atom in atom_list:
        if atom in merge_keys:
            out_list.append(merge_dict[atom])
        else:
            out_list.append(atom)

    return out_list

def parseColumn(column):
    """
    Parse the single column output of a vmd output file generated by
    calc_hbond.tcl.
    """

    skip = ["}"]
    hbonds = [c for c in list(column) if c not in skip]
    hbonds = "".join(hbonds)
    hbonds = hbonds.split("{{")[1:]
    hbonds = [c.strip() for c in hbonds]
    hbonds = [h.split() for h in hbonds]
    residues = [int(h[0]) for h in hbonds]
    aacids = [h[1] for h in hbonds]
    atoms = [h[2] for h in hbonds] 
    atoms = mergeAtoms(atoms)

    # Collapse solvent atoms so we don't count each water as unique
    for i in range(len(aacids)):
        if aacids[i] == "SOL":
            residues[i] = -1

    return zip(residues,aacids,atoms)

def readFile(vmd_output):
    """
    Read vmd_output and return list of tuples representing hydrogen bonds as
    a function of frame.
    """

    # Read file
    f = open(vmd_output,'r')
    lines = f.readlines()
    f.close()

    # Find lines with actual data
    hash = [l[0:3] for l in lines]
    start_index = hash.index("BEG") + 1
    end_index = hash.index("END")
    lines = lines[start_index:end_index]

    hbonds = []
    for line in lines:
        columns = line.split("\t")

        time = int(columns[0])

        # sel_atoms are atoms that were passed to calc_hbonds.tcl and are thus
        # place first in the tuples
        sel_atoms = parseColumn(columns[1])
        sel_atoms.extend(parseColumn(columns[4]))

        # all other atoms involved in hydrogen bonds
        nonsel_atoms = parseColumn(columns[2])
        nonsel_atoms.extend(parseColumn(columns[3]))

        hbonds.append([(sel_atoms[i],nonsel_atoms[i])
                       for i in range(len(sel_atoms))])

    return hbonds


def extractHbonds(vmd_output):
    """
    Read hydrogen bounds from vmd_output and create R-readable output.
    """

    # Read hbond vs. frame from vmd file
    hbonds = readFile(vmd_output)
   
    # Generate list of unique hydrogen bonds over the trajectory.
    flat_hbonds = []
    for frame in hbonds:
        flat_hbonds.extend(frame)
    unique_hbonds = dict([(l,[]) for l in flat_hbonds])
    unique_hbonds = unique_hbonds.keys()
    unique_hbonds.sort()

    # Remove spurious non-polar/polar hydrogen bonds
    #polar = ["O","N"]
    #unique_hbonds = [b for b in unique_hbonds
    #                 if b[0][2][0] in polar and b[1][2][0] in polar]

    
    # Create dictionary of pretty output formats
    formats = dict([(k,"%6i%6s%6s%6i%6s%6s" % \
                     (k[0][0],k[0][1],k[0][2],k[1][0],k[1][1],k[1][2]))
                    for k in unique_hbonds])

    # Find whether each observed hbond is in each frame
    out = []
    num_frames = len(hbonds)
    for bond in unique_hbonds:
        obs = sum([1 for frame in hbonds if bond in frame])
        out.append("%s%6.3f\n" % (formats[bond],obs/float(num_frames)))

    # Return output
    return out 


def main():
    """
    Function to call if run from command line.
    """

    # Parse command line.
    try:
        input_file=sys.argv[1]
    except IndexError:
        print __usage__
        sys.exit()
    #if not os.path.isdir(input_dir):
    #    print "\"%s\" is not a directory!" % input_dir
    #    sys.exit()

    # Extract information for each file
    #file_list = [os.path.join(input_dir,f) for f in os.listdir(input_dir)]
    #file_list = [f for f in file_list if f[-4:] == ".txt"]   
    #out = [] 
    #for i, f in enumerate(file_list): 
    #    out.extend(extractHbonds(f,i))

    out = extractHbonds(input_file)

    # Add counter to each line of output and add header
    out = ["%10i%s" % (i,x) for i, x in enumerate(out)]   
    out.insert(0,"%10s%6s%6s%6s%6s%6s%6s%6s\n" % (" ",
                "res1","aa1","atom1","res2","aa2","atom2","hbond"))

    print "".join(out)

if __name__ == "__main__":
    main()
